
public class KLists {

    public static double [] mergeKLists(double[][] outerArray){

        // if there are no inner arrays,
        // it's already sorted --> so we just return an empty array
        if(outerArray.length == 0){
            return new double[0];
        }

        // Initialize final array
        double [] outputArray = outerArray[0];

        //Loop through the outer array
        for(int i = 1; i < outerArray.length; i++){
            // Use merge function with the output and wherever the loop is at in the outerarray
            outputArray = merge(outputArray, outerArray[i]);
        }
        return outputArray;
    }

    // added merge function
    public static double [] merge(double[] left, double[] right){
        // the result will have a length of the left & right subarrays
        double [] outputArray = new double[left.length + right.length];

        int i = 0;
        int l = 0;
        int r = 0;

        // while the pointer is less than the length of the left & right subarrays
        while(l < left.length &&  r < right.length){
            // if the left subarray element is less than the right
            if(left[l] <= right[r]){
                // add the left element to the array
                outputArray[i] = left[l++];
            }
            else{
                // otherwise add the right element
                outputArray[i] = right[r++];
            }
            // add to the outer loop
            i++;
        }

        // every time we look at the l elements, we change the element in i to the left element
        while(l < left.length){
            outputArray[i++] = left[l++];
        }

        // every time we look at the r elements, we change the element in i to the right element
        while(r < right.length){
            outputArray[i++] = right[r++];
        }
        return outputArray;
    }

    // print function
    public void print(double [] outputArray){
        // include brackets to represent empty array
        System.out.print("[");

        // length - 1 so there aren't any element repeats
        for(int i = 0; i < outputArray.length - 1; i++){
            System.out.print(outputArray[i] + ", ");
        }
        if(outputArray.length > 0){
            System.out.print(outputArray[outputArray.length - 1]);
        }
        System.out.println("]\n");
    }

    public static void main(String[] args) {
        // create a new class list
        KLists kList = new KLists();

        // test arrays
        double [][] test1 = {{1.1, 4.4, 5.5}, {1.1, 3.3, 4.4}, {2.2, 6.6}};
        double [][] test2 = {};
        double [][] test3 = {{}};
        double [][] test4 = {{9.7, 17.1,}, {15.8}, {12.7, 18.5, 21.27}};

        // call mergeKLists function
        double[] result1 = mergeKLists(test1);
        double[] result2 = mergeKLists(test2);
        double[] result3 = mergeKLists(test3);
        double[] result4 = mergeKLists(test4);

        // print arrays
        System.out.println("First array: ");
        kList.print(result1);
        System.out.println("Second array: ");
        kList.print(result2);
        System.out.println("Third array: ");
        kList.print(result3);
        System.out.println("Fourth array: ");
        kList.print(result4);

    }

}
